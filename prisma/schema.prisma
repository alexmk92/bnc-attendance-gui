generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model knex_migrations {
  id             Int    @id @default(autoincrement())
  name           String?   @db.VarChar(255)
  batch          Int?
  migration_time DateTime? @db.Timestamptz(6)
}

model knex_migrations_lock {
  index     Int  @id @default(autoincrement())
  is_locked Int?
}

model player {
  id                                      BigInt        @id @default(autoincrement())
  name                                    String        @unique(map: "player_name_unique") @db.VarChar(255)
  level                                   Int?       @default(0)
  class                                   String?       @db.VarChar(255)
  attendance_30                           Float?        @db.Real
  attendance_60                           Float?        @db.Real
  attendance_90                           Float?        @db.Real
  attendance_life                         Float?        @db.Real
  ticks_since_last_win                    Int?       @default(0)
  created_at                              DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at                              DateTime?     @default(now()) @db.Timestamptz(6)
  player_alt_playerToplayer_alt_alt_id    player_alt[]  @relation("playerToplayer_alt_alt_id")
  player_alt_playerToplayer_alt_player_id player_alt[]  @relation("playerToplayer_alt_player_id")
  player_raid                             player_raid[]
  raffle                                  raffle[]
}

model player_alt {
  player_id                           BigInt
  alt_id                              BigInt
  player_playerToplayer_alt_alt_id    player @relation("playerToplayer_alt_alt_id", fields: [alt_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "player_alt_alt_id_foreign")
  player_playerToplayer_alt_player_id player @relation("playerToplayer_alt_player_id", fields: [player_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "player_alt_player_id_foreign")

  @@id([player_id, alt_id])
}

model player_raid {
  player_id  BigInt
  raid_id    BigInt
  raid_hour  Int
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  player     player    @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "player_raid_player_id_foreign")
  raid       raid      @relation(fields: [raid_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "player_raid_raid_id_foreign")

  @@id([player_id, raid_id, raid_hour])
}

model raffle {
  id           BigInt    @id @default(autoincrement())
  raid_id      BigInt
  winner_id    BigInt?
  roll_symbol  String?   @db.VarChar(255)
  item_name    String    @db.VarChar(255)
  winning_roll Int?
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  updated_at   DateTime? @default(now()) @db.Timestamptz(6)
  raid         raid      @relation(fields: [raid_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "raffle_raid_id_foreign")
  player       player?   @relation(fields: [winner_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "raffle_winner_id_foreign")
}

model raid {
  id          BigInt        @id @default(autoincrement())
  name        String        @db.VarChar(255)
  created_at  DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at  DateTime?     @default(now()) @db.Timestamptz(6)
  split       String        @default("1") @db.VarChar(255)
  player_raid player_raid[]
  raffle      raffle[]

  @@unique([created_at, split], map: "raid_created_at_split_unique")
}
